{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/32969593-4e86-40ac-b59a-29c9616148eb')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/32969593-4e86-40ac-b59a-29c9616148eb')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-09-01-preview",
            "properties": {
                "displayName": "Abnormal Port to Protocol - Github Test",
                "description": "Identifies communication for well known protocol over a non-standard port based on learning period activity. This can indicate malicious communication (C2) or exfiltration by attackers trying to communicate over known ports (22:SSH, 80:HTTP) but don't use the known protocol headers to match the port number.\n\nConfigurable Parameters:\n\n- Learning period time - learning period for protocol learning in days. Default is set to 7.",
                "severity": "Medium",
                "enabled": false,
                "query": "let LearningPeriod = 14d;\nlet RunTime = 7d;\nlet StartLearningPeriod = LearningPeriod + RunTime;\nlet EndRunTime = RunTime - 5d;\nlet LearningPortToProtocol = (AzureDiagnostics | where OperationName == \"AzureFirewallApplicationRuleLog\" | parse msg_s with protocol \" request from \" srcip \":\" srcport \" to \" dsturl \":\" dstport \".\" * | where isnotempty(dstport) | where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime)) | summarize LearningTimeCount = count() by LearningTimeDstPort = dstport, LearningTimeProtocol = protocol, srcip, dsturl);\nlet AlertTimePortToProtocol = (AzureDiagnostics | where OperationName == \"AzureFirewallApplicationRuleLog\" | parse msg_s with protocol \" request from \" srcip \":\" srcport \" to \" dsturl \":\" dstport \".\" * | where isnotempty(dstport) | where TimeGenerated between (ago(RunTime) .. ago(EndRunTime)) | summarize AlertTimeCount = count() by AlertTimeDstPort = dstport, AlertTimeProtocol = protocol);\nAlertTimePortToProtocol | join kind=leftouter (LearningPortToProtocol) on $left.AlertTimeDstPort == $right.LearningTimeDstPort | where LearningTimeProtocol != AlertTimeProtocol | extend IPCustomEntity = srcip, URLCustomEntity = dsturl\n",
                "queryFrequency": "PT30M",
                "queryPeriod": "PT30M",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 1,
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "tactics": [
                    "Reconnaissance",
                    "DefenseEvasion",
                    "Exfiltration",
                    "CommandAndControl"
                ],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5M",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": null,
                        "groupByCustomDetails": null
                    }
                },
                "eventGroupingSettings": null,
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "URLCustomEntity"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null
            }
        }
    ]
}
